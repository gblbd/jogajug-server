{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger-library-system",
    "description": "Swagger Api Docs For library system.",
    "contact": {
      "email": ""
    }
  },
  "schemes": ["http", "https"],
  "paths": {
    "/api/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "user registration",
        "description": "it is signup form where you will send name,email,pasword, from a form in body. API accepting form data by `req.body`. ",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user information",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "karmaker"
                },
                "email": {
                  "type": "string",
                  "example": "suvravi@diu.edu.bd"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "user signin",
        "description": "it is signin form where you will send email,pasword, from a form in body. API accepting form data by `req.body`.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user information for signin.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "kamol@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user-details/641189266ffe19f967c461a1": {
      "get": {
        "tags": ["Auth"],
        "summary": "get details of user",
        "description": "this api will provide details of user by send id as parameter.in the api there is a user id. you will set the id of the user dynamically. it will give you the data ",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "params",

            "name": "id",
            "description": "enter user id.",

            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user-list": {
      "get": {
        "tags": ["Auth"],
        "summary": "get details of user",
        "description": "this api will provide all user data list. ",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "params",

            "name": "id",
            "description": "enter user id.",

            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/get-users-list-for-message?search=j": {
      "get": {
        "tags": ["Auth"],
        "summary": "get user list excpet logedin user",
        "description": "this api will provide all user data list by send query parameter as data. you will send query parameter like this /api/get-users-list-for-message?search=${dynamic-variable name}. ",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "query",

            "name": "query",
            "description": "enter user name and email ",

            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user-public-post": {
      "post": {
        "tags": ["User Post"],
        "summary": "user post for newsfeed",
        "description": "This API accepting  data from body. so send the data from body. when you will send image or gif data that time convert the image into base64 and then send it through api.It must be anr array of string. The 'taggedUserFriend' will be also a array of id which will be string value ",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "api for post.",

            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postText": {
                  "type": "string",
                  "example": "my new post for new media ap"
                },
                "activityStatus": {
                  "type": "string",
                  "example": "feeling happy"
                },
                "taggedUserFriend": {
                  "type": "array",
                  "example": [
                    "6409a085240a9a1ea73e783e",
                    "6409d154ad423af4416aaea5"
                  ]
                },
                "postLocation": {
                  "type": "string",
                  "example": "dhaka"
                },
                "shareLink": {
                  "type": "string",
                  "example": "www.klink.com"
                },
                "newsfeedStatus": {
                  "type": "string",
                  "example": "private"
                },
                "postImageList": {
                  "type": "array"
                },
                "postGifImage": {
                  "type": "array"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/read-weather-report": {
      "get": {
        "tags": ["Weather"],
        "summary": "get details of user",
        "description": "this api will provide details of todays weather in json format. ",
        "consumes": ["application/json"],
        "produces": ["application/json"],

        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user-chat-access": {
      "post": {
        "tags": ["Chat Application API"],
        "summary": "chat access",
        "description": "this api will receive user id from frontend body in json format. And will create chat with that user id.<br />like you will click on a user and you will be able to chat with him by sending the id in the server as json data:",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "user id need to send from body as object data.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "640c56d5875e12ae58fdd1cd"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/fetch-chat-data": {
      "get": {
        "tags": ["Chat Application API"],
        "summary": "chat fetch",
        "description": "this api will give you chat data from db. like me and sumon chatted before. this api will give me that data:.Also i have chatted in  a group. it will also show that data.It will show all the chat history",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/create-group-chat": {
      "post": {
        "tags": ["Chat Application API"],
        "summary": "chat group create",
        "description": "for this api you need to send `name, users` as an object data as json format.ussers list will be an array data.your form will make a json object data in a variable. <br /> this api needs at least 2 users to create a group. who will create group will be the admin of the group",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "Authorization",
            "description": "Access Token",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "for this api you need to send `name, users` as an object data as json format.ussers list will be an array data.your form will make a json object data in a variable.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "test-mygbl-group"
                },
                "users": {
                  "type": "string",
                  "example": [
                    "6409d154ad423af4416aaea5",
                    "640bfe8dec5075824497f423"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
